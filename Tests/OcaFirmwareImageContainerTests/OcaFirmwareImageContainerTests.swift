//
// Copyright (c) 2025 PADL Software Pty Ltd
//
// Licensed under the Apache License, Version 2.0 (the License);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an 'AS IS' BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import Foundation
@testable import OcaFirmwareImageContainer
import SwiftOCA
import XCTest

final class OcaFirmwareImageContainerTests: XCTestCase {
  func testImageEncoding() throws {
    let descriptor = OcaFirmwareImageContainerComponentDescriptor(component: 7)
    let component = OcaFirmwareImageContainerMemoryComponent(
      descriptor: descriptor,
      imageData: [0xFE, 0xED, 0xFA, 0xCE],
      verifyData: [0xCA, 0xFE, 0xBA, 0xBE]
    )

    let data = try OcaFirmwareImageContainerMemoryWriter.encode(components: [component])
    debugPrint(data)
    XCTAssertEqual(data, testVector)
  }

  func testImageDecoding() async throws {
    let decoded = try await OcaFirmwareImageContainerMemoryReader.decode(bytes: testVector)
    XCTAssertEqual(decoded.componentCount, 2)
    try await decoded
      .withFirstComponent(OcaFirmwareImageContainerSHA512ChecksumComponent) { descriptor, _, _ in
        XCTAssertEqual(descriptor.component, OcaFirmwareImageContainerSHA512ChecksumComponent)
      }
    try await decoded.withFirstComponent(7) { descriptor, imageData, verifyData in
      XCTAssertEqual(descriptor.component, 7)
      XCTAssertEqual(Array(imageData), [0xFE, 0xED, 0xFA, 0xCE])
      XCTAssertEqual(verifyData, [0xCA, 0xFE, 0xBA, 0xBE])
    }
  }
}

let testVector: [UInt8] = [
  12,
  160,
  241,
  207,
  1,
  0,
  0,
  0,
  24,
  0,
  0,
  0,
  1,
  0,
  2,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  7,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  128,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  136,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  64,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  254,
  237,
  250,
  206,
  204,
  204,
  204,
  204,
  202,
  254,
  186,
  190,
  204,
  204,
  204,
  204,
  188,
  129,
  57,
  153,
  137,
  59,
  130,
  210,
  75,
  35,
  154,
  208,
  208,
  51,
  206,
  8,
  254,
  68,
  12,
  208,
  43,
  112,
  238,
  70,
  115,
  210,
  193,
  154,
  246,
  178,
  111,
  49,
  31,
  3,
  67,
  89,
  129,
  215,
  161,
  209,
  204,
  243,
  84,
  18,
  41,
  203,
  126,
  24,
  144,
  181,
  137,
  183,
  213,
  108,
  76,
  146,
  61,
  187,
  192,
  217,
  114,
  45,
  64,
  2,
]

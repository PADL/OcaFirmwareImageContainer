/*
 * Copyright 2025 PADL Software Pty Ltd. All rights reserved.
 *
 * The information and source code contained herein is the exclusive
 * property of PADL Software Pty Ltd and may not be disclosed, examined
 * or reproduced in whole or in part without explicit written authorization
 * from the company.
 */

import Foundation
@testable import OcaFirmwareImageContainer
import SwiftOCA
import XCTest

final class InfernoImageTests: XCTestCase {
  func testImageEncoding() throws {
    let descriptor = OcaFirmwareImageContainerComponentDescriptor(component: .testing)
    let component = OcaFirmwareImageContainerMemoryComponent(
      descriptor: descriptor,
      imageData: [0xFE, 0xED, 0xFA, 0xCE],
      verifyData: [0xCA, 0xFE, 0xBA, 0xBE]
    )

    let data = try OcaFirmwareImageContainerMemoryWriter.encode(components: [component])
    XCTAssertEqual(data, testVector)
  }

  func testImageDecoding() async throws {
    let decoded = try await OcaFirmwareImageContainerMemoryReader.decode(bytes: testVector)
    XCTAssertEqual(decoded.componentCount, 2)
    try decoded
      .withComponent(OcaFirmwareImageContainerSHA512ChecksumComponent) { descriptor, _, _ in
        XCTAssertEqual(descriptor.component, OcaFirmwareImageContainerSHA512ChecksumComponent)
      }
    try decoded.withComponent(7) { descriptor, imageData, verifyData in
      XCTAssertEqual(descriptor.component, 7)
      XCTAssertEqual(Array(imageData), [0xFE, 0xED, 0xFA, 0xCE])
      XCTAssertEqual(verifyData, [0xCA, 0xFE, 0xBA, 0xBE])
    }
  }
}

let testVector: [UInt8] = [
  12,
  160,
  241,
  207,
  1,
  1,
  24,
  0,
  0,
  0,
  2,
  0,
  0,
  10,
  233,
  27,
  2,
  1,
  1,
  0,
  255,
  255,
  255,
  255,
  7,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  128,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  136,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  64,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  254,
  237,
  250,
  206,
  204,
  204,
  204,
  204,
  202,
  254,
  186,
  190,
  204,
  204,
  204,
  204,
  215,
  160,
  60,
  88,
  112,
  204,
  156,
  157,
  200,
  250,
  9,
  71,
  230,
  64,
  233,
  80,
  104,
  247,
  173,
  55,
  133,
  48,
  1,
  46,
  24,
  200,
  49,
  211,
  24,
  112,
  99,
  41,
  26,
  5,
  10,
  213,
  189,
  216,
  31,
  84,
  5,
  232,
  144,
  83,
  148,
  169,
  43,
  213,
  240,
  189,
  128,
  121,
  155,
  101,
  140,
  141,
  6,
  35,
  46,
  192,
  30,
  118,
  201,
  234,
]

/*
 * Copyright 2025 PADL Software Pty Ltd. All rights reserved.
 *
 * The information and source code contained herein is the exclusive
 * property of PADL Software Pty Ltd and may not be disclosed, examined
 * or reproduced in whole or in part without explicit written authorization
 * from the company.
 */

import Foundation
@testable import OcaFirmwareImageContainer
import SwiftOCA
import XCTest

final class OcaFirmwareImageContainerTests: XCTestCase {
  func testImageEncoding() throws {
    let descriptor = OcaFirmwareImageContainerComponentDescriptor(component: 7)
    let component = OcaFirmwareImageContainerMemoryComponent(
      descriptor: descriptor,
      imageData: [0xFE, 0xED, 0xFA, 0xCE],
      verifyData: [0xCA, 0xFE, 0xBA, 0xBE]
    )

    let data = try OcaFirmwareImageContainerMemoryWriter.encode(components: [component])
    debugPrint(data)
    XCTAssertEqual(data, testVector)
  }

  func testImageDecoding() async throws {
    let decoded = try await OcaFirmwareImageContainerMemoryReader.decode(bytes: testVector)
    XCTAssertEqual(decoded.componentCount, 2)
    try await decoded
      .withComponent(OcaFirmwareImageContainerSHA512ChecksumComponent) { descriptor, _, _ in
        XCTAssertEqual(descriptor.component, OcaFirmwareImageContainerSHA512ChecksumComponent)
      }
    try await decoded.withComponent(7) { descriptor, imageData, verifyData in
      XCTAssertEqual(descriptor.component, 7)
      XCTAssertEqual(Array(imageData), [0xFE, 0xED, 0xFA, 0xCE])
      XCTAssertEqual(verifyData, [0xCA, 0xFE, 0xBA, 0xBE])
    }
  }
}

let testVector: [UInt8] = [
  12,
  160,
  241,
  207,
  1,
  1,
  24,
  0,
  0,
  0,
  2,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  255,
  255,
  255,
  255,
  7,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  120,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  128,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  136,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  64,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  254,
  237,
  250,
  206,
  204,
  204,
  204,
  204,
  202,
  254,
  186,
  190,
  204,
  204,
  204,
  204,
  18,
  140,
  169,
  189,
  11,
  74,
  232,
  238,
  77,
  34,
  168,
  83,
  70,
  172,
  160,
  142,
  190,
  11,
  41,
  152,
  141,
  154,
  242,
  84,
  41,
  32,
  22,
  194,
  175,
  243,
  225,
  37,
  158,
  152,
  35,
  235,
  170,
  237,
  62,
  201,
  97,
  54,
  111,
  134,
  10,
  35,
  241,
  101,
  178,
  224,
  83,
  241,
  113,
  196,
  180,
  206,
  101,
  240,
  112,
  181,
  140,
  2,
  196,
  239,
]

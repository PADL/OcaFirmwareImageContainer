/*
 * Copyright 2025 PADL Software Pty Ltd. All rights reserved.
 *
 * The information and source code contained herein is the exclusive
 * property of PADL Software Pty Ltd and may not be disclosed, examined
 * or reproduced in whole or in part without explicit written authorization
 * from the company.
 */

import Foundation
@testable import OcaFirmwareImageContainer
import SwiftOCA
import XCTest

final class OcaFirmwareImageContainerTests: XCTestCase {
  func testImageEncoding() throws {
    let descriptor = OcaFirmwareImageContainerComponentDescriptor(component: 7)
    let component = OcaFirmwareImageContainerMemoryComponent(
      descriptor: descriptor,
      imageData: [0xFE, 0xED, 0xFA, 0xCE],
      verifyData: [0xCA, 0xFE, 0xBA, 0xBE]
    )

    let data = try OcaFirmwareImageContainerMemoryWriter.encode(components: [component])
    debugPrint(data)
    XCTAssertEqual(data, testVector)
  }

  func testImageDecoding() async throws {
    let decoded = try await OcaFirmwareImageContainerMemoryReader.decode(bytes: testVector)
    XCTAssertEqual(decoded.componentCount, 2)
    try decoded
      .withComponent(OcaFirmwareImageContainerSHA512ChecksumComponent) { descriptor, _, _ in
        XCTAssertEqual(descriptor.component, OcaFirmwareImageContainerSHA512ChecksumComponent)
      }
    try decoded.withComponent(7) { descriptor, imageData, verifyData in
      XCTAssertEqual(descriptor.component, 7)
      XCTAssertEqual(Array(imageData), [0xFE, 0xED, 0xFA, 0xCE])
      XCTAssertEqual(verifyData, [0xCA, 0xFE, 0xBA, 0xBE])
    }
  }
}

let testVector: [UInt8] =
  [
    12,
    160,
    241,
    207,
    1,
    1,
    24,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    255,
    255,
    255,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    128,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    128,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    136,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    254,
    237,
    250,
    206,
    204,
    204,
    204,
    204,
    202,
    254,
    186,
    190,
    204,
    204,
    204,
    204,
    238,
    178,
    26,
    117,
    120,
    184,
    237,
    222,
    15,
    207,
    246,
    227,
    253,
    217,
    246,
    153,
    199,
    187,
    214,
    32,
    192,
    190,
    39,
    129,
    219,
    97,
    250,
    158,
    43,
    54,
    61,
    43,
    71,
    121,
    153,
    0,
    146,
    22,
    58,
    196,
    221,
    119,
    153,
    76,
    240,
    164,
    192,
    76,
    169,
    206,
    60,
    141,
    193,
    214,
    252,
    237,
    168,
    28,
    84,
    9,
    235,
    136,
    4,
    193,
  ]
